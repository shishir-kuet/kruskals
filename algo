#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// A structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// A structure to represent a graph
struct Graph {
    int V, E;               // V is number of vertices, E is number of edges
    vector<Edge> edges;      // Edge list of the graph
};

// A structure to represent a subset for Union-Find
struct Subset {
    int parent;
    int rank;
};

// Function to find the subset of an element i (using path compression)
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to perform Union of two subsets x and y (using union by rank)
void Union(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Comparator function to sort edges based on their weight
bool compare(Edge a, Edge b) {
    return a.weight < b.weight;
}

// Function to implement Kruskal's algorithm
void KruskalMST(Graph& graph) {
    vector<Edge> result;  // This will store the resultant MST
    int V = graph.V;
    Subset* subsets = new Subset[V];

    // Initialize subsets (single-element sets)
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Step 1: Sort all the edges in non-decreasing order of their weight
    sort(graph.edges.begin(), graph.edges.end(), compare);

    // Number of edges to be taken is V-1
    for (Edge& edge : graph.edges) {
        int x = find(subsets, edge.src);
        int y = find(subsets, edge.dest);

        // If including this edge doesn't cause a cycle, include it in the result
        if (x != y) {
            result.push_back(edge);
            Union(subsets, x, y);
        }

        // If we already have V-1 edges in the result, stop
        if (result.size() == V - 1)
            break;
    }

    // Print the resultant MST
    cout << "Edges in the Minimum Spanning Tree:\n";
    for (Edge& edge : result)
        cout << edge.src << " -- " << edge.dest << " == " << edge.weight << endl;

    delete[] subsets;
}

int main() {
    // Create a graph with 4 vertices and 5 edges
    int V = 4, E = 5;
    Graph graph = {V, E};

    // Add edges (src, dest, weight)
    graph.edges.push_back({0, 1, 10});
    graph.edges.push_back({0, 2, 6});
    graph.edges.push_back({0, 3, 5});
    graph.edges.push_back({1, 3, 15});
    graph.edges.push_back({2, 3, 4});

    // Run Kruskal's algorithm
    KruskalMST(graph);

    return 0;
}
